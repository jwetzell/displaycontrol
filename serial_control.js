/*
 Copyright 2014-2019 Sony Home Entertainment & Sound Products Inc.
*/

const serialport = require("serialport");

const commands = {
  "power_on":                        [0x8C, 0x00, 0x00, 0x02, 0x01],
  "power_off":                       [0x8C, 0x00, 0x00, 0x02, 0x00],
  "power_get":                       [0x83, 0x00, 0x00, 0xFF, 0xFF],
  "standby_on":                      [0x8C, 0x00, 0x01, 0x02, 0x01],
  "standby_off":                     [0x8C, 0x00, 0x01, 0x02, 0x00],
  "input_select_toggle":             [0x8C, 0x00, 0x02, 0x02, 0x00],
  "input_select_video1":             [0x8C, 0x00, 0x02, 0x03, 0x02, 0x01],
  "input_select_video2":             [0x8C, 0x00, 0x02, 0x03, 0x02, 0x02],
  "input_select_video2":             [0x8C, 0x00, 0x02, 0x03, 0x02, 0x03],
  "input_select_component1":         [0x8C, 0x00, 0x02, 0x03, 0x03, 0x01],
  "input_select_component2":         [0x8C, 0x00, 0x02, 0x03, 0x03, 0x02],
  "input_select_component3":         [0x8C, 0x00, 0x02, 0x03, 0x03, 0x03],
  "input_select_hdmi1":              [0x8C, 0x00, 0x02, 0x03, 0x04, 0x01],
  "input_select_hdmi2":              [0x8C, 0x00, 0x02, 0x03, 0x04, 0x02],
  "input_select_hdmi3":              [0x8C, 0x00, 0x02, 0x03, 0x04, 0x03],
  "input_select_hdmi4":              [0x8C, 0x00, 0x02, 0x03, 0x04, 0x04],
  "input_select_hdmi5":              [0x8C, 0x00, 0x02, 0x03, 0x04, 0x05],
  "input_select_pc1":                [0x8C, 0x00, 0x02, 0x03, 0x05, 0x01],
  "input_select_shared1":            [0x8C, 0x00, 0x02, 0x03, 0x07, 0x01],
  "input_select_get":                [0x83, 0x00, 0x02, 0xFF, 0xFF],
  "volume_control_up":               [0x8C, 0x00, 0x05, 0x03, 0x00, 0x00],
  "volume_control_down":             [0x8C, 0x00, 0x05, 0x03, 0x00, 0x01],
  "volume_control_direct":           [0x8C, 0x00, 0x05, 0x03, 0x01, 0x00],
  "muting_toggle":                   [0x8C, 0x00, 0x06, 0x02, 0x00],
  "muting_off":                      [0x8C, 0x00, 0x06, 0x03, 0x01, 0x00],
  "muting_on":                       [0x8C, 0x00, 0x06, 0x03, 0x01, 0x01],
  "off_timer_toggle":                [0x8C, 0x00, 0x0C, 0x02, 0x00],
  "off_timer_direct":                [0x8C, 0x00, 0x0C, 0x03, 0x01, 0x00],
  "picture_on":                      [0x8C, 0x00, 0x0D, 0x03, 0x01, 0x01],
  "picture_off":                     [0x8C, 0x00, 0x0D, 0x03, 0x01, 0x00],
  "teletext_tottle":                 [0x8C, 0x00, 0x0E, 0x02, 0x00],
  "teletext_direct_off":             [0x8C, 0x00, 0x0E, 0x03, 0x01, 0x00],
  "teletext_direct_text":            [0x8C, 0x00, 0x0E, 0x03, 0x01, 0x01],
  "teletext_direct_mix":             [0x8C, 0x00, 0x0E, 0x03, 0x01, 0x02],
  "display_toggle":                  [0x8C, 0x00, 0x0F, 0x02, 0x00],
  "closed_caption_toggle":           [0x8C, 0x00, 0x10, 0x02, 0x00],
  "closed_caption_off":              [0x8C, 0x00, 0x10, 0x03, 0x01, 0x00],
  "closed_caption_on":               [0x8C, 0x00, 0x10, 0x03, 0x01, 0x01],
  "closed_caption_analog_cc1":       [0x8C, 0x00, 0x10, 0x04, 0x02, 0x00, 0x01],
  "closed_caption_analog_cc2":       [0x8C, 0x00, 0x10, 0x04, 0x02, 0x00, 0x02],
  "closed_caption_analog_cc3":       [0x8C, 0x00, 0x10, 0x04, 0x02, 0x00, 0x03],
  "closed_caption_analog_cc4":       [0x8C, 0x00, 0x10, 0x04, 0x02, 0x00, 0x04],
  "closed_caption_analog_text1":     [0x8C, 0x00, 0x10, 0x04, 0x02, 0x00, 0x05],
  "closed_caption_analog_text2":     [0x8C, 0x00, 0x10, 0x04, 0x02, 0x00, 0x06],
  "closed_caption_analog_text3":     [0x8C, 0x00, 0x10, 0x04, 0x02, 0x00, 0x07],
  "closed_caption_analog_text4":     [0x8C, 0x00, 0x10, 0x04, 0x02, 0x00, 0x08],
  "closed_caption_digital_service1": [0x8C, 0x00, 0x10, 0x04, 0x02, 0x01, 0x01],
  "closed_caption_digital_service2": [0x8C, 0x00, 0x10, 0x04, 0x02, 0x01, 0x02],
  "closed_caption_digital_service3": [0x8C, 0x00, 0x10, 0x04, 0x02, 0x01, 0x03],
  "closed_caption_digital_service4": [0x8C, 0x00, 0x10, 0x04, 0x02, 0x01, 0x04],
  "closed_caption_digital_service5": [0x8C, 0x00, 0x10, 0x04, 0x02, 0x01, 0x05],
  "closed_caption_digital_service6": [0x8C, 0x00, 0x10, 0x04, 0x02, 0x01, 0x06],
  "closed_caption_digital_cc1":      [0x8C, 0x00, 0x10, 0x04, 0x02, 0x01, 0x07],
  "closed_caption_digital_cc2":      [0x8C, 0x00, 0x10, 0x04, 0x02, 0x01, 0x08],
  "closed_caption_digital_cc3":      [0x8C, 0x00, 0x10, 0x04, 0x02, 0x01, 0x09],
  "closed_caption_digital_cc4":      [0x8C, 0x00, 0x10, 0x04, 0x02, 0x01, 0x0A],
  "picture_mode_toggle":             [0x8C, 0x00, 0x20, 0x02, 0x00],
  "picture_mode_vivid":              [0x8C, 0x00, 0x20, 0x03, 0x01, 0x00],
  "picture_mode_standard":           [0x8C, 0x00, 0x20, 0x03, 0x01, 0x01],
  "picture_mode_cinema":             [0x8C, 0x00, 0x20, 0x03, 0x01, 0x02],
  "picture_mode_custom":             [0x8C, 0x00, 0x20, 0x03, 0x01, 0x03],
  "picture_mode_cine2":              [0x8C, 0x00, 0x20, 0x03, 0x01, 0x04],
  "picture_mode_sports":             [0x8C, 0x00, 0x20, 0x03, 0x01, 0x05],
  "picture_mode_game":               [0x8C, 0x00, 0x20, 0x03, 0x01, 0x06],
  "picture_mode_graphics":           [0x8C, 0x00, 0x20, 0x03, 0x01, 0x07],
  "sound_mode_standard":             [0x8C, 0x00, 0x30, 0x03, 0x01, 0x01],
  "sound_mode_cinema":               [0x8C, 0x00, 0x30, 0x03, 0x01, 0x04],
  "sound_mode_sports":               [0x8C, 0x00, 0x30, 0x03, 0x01, 0x05],
  "sound_mode_music":                [0x8C, 0x00, 0x30, 0x03, 0x01, 0x06],
  "sound_mode_game":                 [0x8C, 0x00, 0x30, 0x03, 0x01, 0x07],
  "speaker_toggle":                  [0x8C, 0x00, 0x36, 0x02, 0x00],
  "speaker_off":                     [0x8C, 0x00, 0x36, 0x03, 0x01, 0x00],
  "speaker_on":                      [0x8C, 0x00, 0x36, 0x03, 0x01, 0x01],
  "h_shift_up":                      [0x8C, 0x00, 0x41, 0x03, 0x00, 0x00],
  "h_shift_down":                    [0x8C, 0x00, 0x41, 0x03, 0x00, 0x01],
  "h_shift_plus":                    [0x8C, 0x00, 0x41, 0x04, 0x01, 0x00, 0x00],
  "h_shift_minus":                   [0x8C, 0x00, 0x41, 0x04, 0x01, 0x01, 0x00],
  "v_size_up":                       [0x8C, 0x00, 0x42, 0x03, 0x00, 0x00],
  "v_size_down":                     [0x8C, 0x00, 0x42, 0x03, 0x00, 0x01],
  "v_size_plus":                     [0x8C, 0x00, 0x42, 0x04, 0x01, 0x00, 0x00],
  "v_size_minus":                    [0x8C, 0x00, 0x42, 0x04, 0x01, 0x01, 0x00],
  "v_shift_up":                      [0x8C, 0x00, 0x43, 0x03, 0x00, 0x00],
  "v_shift_down":                    [0x8C, 0x00, 0x43, 0x03, 0x00, 0x01],
  "v_shift_plus":                    [0x8C, 0x00, 0x43, 0x04, 0x01, 0x00, 0x00],
  "v_shift_minus":                   [0x8C, 0x00, 0x43, 0x04, 0x01, 0x01, 0x00],
  "wide_toggle":                     [0x8C, 0x00, 0x44, 0x02, 0x00],
  "wide_widezoom":                   [0x8C, 0x00, 0x44, 0x03, 0x01, 0x00],
  "wide_full":                       [0x8C, 0x00, 0x44, 0x03, 0x01, 0x01],
  "wide_zoom":                       [0x8C, 0x00, 0x44, 0x03, 0x01, 0x02],
  "wide_normal":                     [0x8C, 0x00, 0x44, 0x03, 0x01, 0x03],
  "wide_pc_normal":                  [0x8C, 0x00, 0x44, 0x03, 0x01, 0x05],
  "wide_pc_full1":                   [0x8C, 0x00, 0x44, 0x03, 0x01, 0x06],
  "wide_pc_full2":                   [0x8C, 0x00, 0x44, 0x03, 0x01, 0x07],
  "auto_wide_toggle":                [0x8C, 0x00, 0x45, 0x02, 0x00],
  "auto_wide_off":                   [0x8C, 0x00, 0x45, 0x03, 0x01, 0x00],
  "auto_wide_on":                    [0x8C, 0x00, 0x45, 0x03, 0x01, 0x01],
  "mode43_toggle":                   [0x8C, 0x00, 0x45, 0x02, 0x00],
  "mode43_normal":                   [0x8C, 0x00, 0x45, 0x03, 0x01, 0x04],
  "mode43_widezoom":                 [0x8C, 0x00, 0x45, 0x03, 0x01, 0x03],
  "mode43_off":                      [0x8C, 0x00, 0x45, 0x03, 0x01, 0x00],
  "cinemotion_off":                  [0x8C, 0x00, 0x2A, 0x02, 0x00],
  "cinemotion_auto":                 [0x8C, 0x00, 0x2A, 0x02, 0x01],
  "picture_up":                      [0x8C, 0x00, 0x23, 0x03, 0x00, 0x00],
  "picture_down":                    [0x8C, 0x00, 0x23, 0x03, 0x00, 0x01],
  "picture_direct":                  [0x8C, 0x00, 0x23, 0x03, 0x01, 0x00],
  "brightness_up":                   [0x8C, 0x00, 0x24, 0x03, 0x00, 0x00],
  "brightness_down":                 [0x8C, 0x00, 0x24, 0x03, 0x00, 0x01],
  "brightness_direct":               [0x8C, 0x00, 0x24, 0x03, 0x01, 0x00],
  "color_up":                        [0x8C, 0x00, 0x25, 0x03, 0x00, 0x00],
  "color_down":                      [0x8C, 0x00, 0x25, 0x03, 0x00, 0x01],
  "color_direct":                    [0x8C, 0x00, 0x25, 0x03, 0x01, 0x00],
  "hue_red_up":                      [0x8C, 0x00, 0x26, 0x04, 0x00, 0x00, 0x00],
  "hue_red_down":                    [0x8C, 0x00, 0x26, 0x04, 0x00, 0x00, 0x01],
  "hue_green_up":                    [0x8C, 0x00, 0x26, 0x04, 0x00, 0x01, 0x00],
  "hue_green_down":                  [0x8C, 0x00, 0x26, 0x04, 0x00, 0x01, 0x01],
  "hue_red_direct":                  [0x8C, 0x00, 0x26, 0x04, 0x01, 0x00, 0x00],
  "hue_green_direct":                [0x8C, 0x00, 0x26, 0x04, 0x01, 0x01, 0x00],
  "sharpness_up":                    [0x8C, 0x00, 0x28, 0x03, 0x00, 0x00],
  "sharpness_down":                  [0x8C, 0x00, 0x28, 0x03, 0x00, 0x01],
  "sharpness_direct":                [0x8C, 0x00, 0x28, 0x03, 0x01, 0x00],
  "sircs_emulation":                 [0x8C, 0x00, 0x67, 0x03, 0x00, 0x00],
  "sircs_emulation_home":            [0x8C, 0x00, 0x67, 0x03, 0x01, 0x60],
  "signage_id_command":              [0x83, 0x00, 0x6F, 0xFF, 0xFF],
  "signage_productinfo1":            [0x83, 0x00, 0x6E, 0xFF, 0xFF],
  "signage_productinfo2":            [0x83, 0x00, 0x6D, 0xFF, 0xFF],
  "signage_productinfo3":            [0x83, 0x00, 0x6C, 0xFF, 0xFF]
}
const answers = {
  "0": "Completed (Normal)",
  "1": "Limit Over (Abnormal End – over maximum value)",
  "2": "Limit Over (Abnormal End – under minimum value)",
  "3": "Command Canceled (Abnormal End)",
  "4": "Parse Error (Data Format Error)"
}

const EL_OK = 0;
const EL_OPEN_ERROR = 1;
const EL_WRITE_ERROR = 2;
const EL_ANSWER_ERROR = 3;
const EL_CHECKSUM_UNMATCHED = 4;
const EL_HEADER_UNKNOWN = 5;
const EL_ANSWER_UNKNOWN = 6;
const EL_CMD_TYPE_UNKNOWN = 7;
const EL_CMD_UNKNOWN = 8;

let resp_index = 0;
let resp_checksum = 0;
let resp_answer = 0;
let resp_return_data_size = 0;
let cmd_type = 0;
let errorlevel = EL_OK;

function toHex(v) {
  return '0x' + (('00' + v.toString(16).toUpperCase()).substr(-2));
}

function resp_log(index, value, msg) {
  console.log('  Response[' + index + ']=' + toHex(value) + ': ' + msg);
}

function getKeys(d) {
  let d_keys = [];
  for (let key in d) {
    d_keys.push(key);
  }
  return d_keys;
}

function checkChecksum(sp, value, checksum, index) {
  if ((checksum & 0xFF)=== value) {
    sp.close();
    resp_log(index, value, 'Checksum matched');
  } else {
    sp.close();
    errorlevel = EL_CHECKSUM_UNMATCHED;              
    resp_log(index, value, 'Error: Checksum unmatched, ' + toHex(checksum));
  }  
}

if (process.argv.length <= 3) {
  console.log("Usage: node serial_control [PORTNAME] [CMDNAME]");
  console.log("");
  console.log("Commands:");
  const command_keys = getKeys(commands).sort();
  for (let i = 0; i < command_keys.length; i++) {
    console.log("  " + command_keys[i]);
  }
  console.log("");
  console.log("Serial Ports:");
  console.log("  [PORTNAME]" + " ".repeat(30 - "[PORTNAME]".length) + "[VENDOR]");
  serialport.list((err, ports) => {
    ports.forEach ((port) => {
      let len = port.comName.length;
      console.log("  " + port.comName + " ".repeat(30 - len) + port.manufacturer);
    })
  })
  return;
}
const portname = process.argv[2];
const cmdname = process.argv[3];
if (commands[cmdname] === undefined) {
  errorlevel = EL_CMD_UNKNOWN;
  return console.log('Error: Unknown command "' + cmdname + '"');
}

process.on('exit', () => {
  process.exit(errorlevel);
});

const sp = new serialport(portname, {
  baudRate: 9600,
  dataBits: 8,
  parity: 'none',
  stopBits: 1,
  flowControl: false,
  parser: new serialport.parsers.Readline("\n")
});

sp.on("data", (data) => {
  for (let i = 0; i < data.length; i++) {
    if (resp_index == 0) { // HEADER
      if (data[i] == 0x70) {
        resp_log(resp_index, data[i], 'ANSWER');
      } else {
        sp.close();        
        errorlevel = EL_HEADER_UNKNOWN;
        return resp_log(resp_index, data[i], 'Error: Header is not ANSWER(0x70), ' + toHex(data[i]));
      } 
    } else if (resp_index == 1) { // ANSWER
      resp_answer = data[i];
      let answer = answers[data[i]];
      if (answer !== undefined) { 
        resp_log(resp_index, data[i], answer);
        if (resp_answer !== 0x00) {
          errorlevel = EL_ANSWER_ERROR;
        }
      } else {
        sp.close();        
        errorlevel = EL_ANSWER_UNKNOWN;
        return resp_log(resp_index, data[i], 'Error: Unknown answer, ' + toHex(data[i]));
      }
    } else {
      if (cmd_type == 0x8C) { // Response to Control Request
        if (resp_index == 2) {
          return checkChecksum(sp, data[i], resp_checksum, resp_index);
        }
      } else if (cmd_type == 0x83) {  // Response to Query Request
        if (resp_index == 2) {
          if (resp_answer == 0x00) {
            resp_return_data_size = data[i];
            resp_return_data_size -= 1;
            resp_log(resp_index, data[i], 'Return Data Size');
          } else {
            return checkChecksum(sp, data[i], resp_checksum, resp_index);
          }
        } else if (resp_index >= 3 && resp_index < (3 + resp_return_data_size)) {
          resp_log(resp_index, data[i], 'Return Data[' + (resp_index - 3) + ']');
        } else if (resp_index == (3 + resp_return_data_size)) {
          return checkChecksum(sp, data[i], resp_checksum, resp_index);
        }
      } else {
        sp.close();
        errorlevel = EL_CMD_TYPE_UNKNOWN;
        return resp_log(resp_index, data[i], 'Error: Unknown command type');
      }
    }
    resp_index += 1;
    resp_checksum += data[i];
  }
});

sp.on("open", (err) => {
  if (err) {
    errorlevel = EL_OPEN_ERROR;
    sp.close();    
    return console.log("Error on open: " + err.message);
  } else {
    console.log("Port '" + portname + "' opened.");
    let buf = commands[cmdname];
    buf.push(0); // for checksum
    let sum = 0;
    for (let i = 0; i < buf.length; i++) {
      if (i == buf.length - 1) {
        buf[i] = sum;
      } else {
        sum += buf[i];
      }
      console.log("   Request[" + i + "]=" + toHex(buf[i]));
    }
    resp_index = 0
    cmd_type = buf[0];
    sp.write(buf, (err) => {
      if (err) {
        errorlevel = EL_WRITE_ERROR;
        sp.close();
        return console.log('Error on write: ', err.message);
      }
      console.log("Command '" + cmdname + "' written.");
    });
  }
});
